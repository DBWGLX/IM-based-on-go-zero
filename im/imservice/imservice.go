// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.2
// Source: im.proto

package imservice

import (
	"context"

	"go-chat/im/im"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetHistoryRequest    = im.GetHistoryRequest
	GetHistoryResponse   = im.GetHistoryResponse
	Message              = im.Message
	StoreMessageRequest  = im.StoreMessageRequest
	StoreMessageResponse = im.StoreMessageResponse

	IMService interface {
		StoreMessage(ctx context.Context, in *StoreMessageRequest, opts ...grpc.CallOption) (*StoreMessageResponse, error)
		GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error)
	}

	defaultIMService struct {
		cli zrpc.Client
	}
)

func NewIMService(cli zrpc.Client) IMService {
	return &defaultIMService{
		cli: cli,
	}
}

func (m *defaultIMService) StoreMessage(ctx context.Context, in *StoreMessageRequest, opts ...grpc.CallOption) (*StoreMessageResponse, error) {
	client := im.NewIMServiceClient(m.cli.Conn())
	return client.StoreMessage(ctx, in, opts...)
}

func (m *defaultIMService) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error) {
	client := im.NewIMServiceClient(m.cli.Conn())
	return client.GetHistory(ctx, in, opts...)
}
